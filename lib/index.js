"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.GifskiCommand=exports.gifskiPath=void 0;const tslib_1=require("tslib"),child_process_1=require("child_process"),os=tslib_1.__importStar(require("os")),path=tslib_1.__importStar(require("path")),events_1=tslib_1.__importDefault(require("events")),platform=process.env.npm_config_platform||os.platform();let platformPath="";switch(platform){case"win32":platformPath=path.join("windows","gifski.exe");break;case"darwin":platformPath=path.join("macos","gifski");break;case"linux":platformPath=path.join("linux","gifski");break}if(!platformPath)throw Error(`gifski executable not found for platform ${platform}.`);exports.gifskiPath=path.join(__dirname,"..","node_modules","gifski","bin",platformPath);class GifskiCommand extends events_1.default.EventEmitter{options;constructor(t){super(),this.options=t}_buildSpawnArgs(){const t=[];return this.options.fps&&t.push("--fps",this.options.fps.toString()),this.options.fast&&t.push("--fast"),this.options.extra&&t.push("--extra"),this.options.quality&&t.push("--quality",this.options.quality.toString()),this.options.width&&t.push("--width",this.options.width.toString()),this.options.height&&t.push("--height",this.options.height.toString()),this.options.noSort&&t.push("--no-sort"),this.options.quiet&&t.push("--quiet"),this.options.repeat&&t.push("--repeat",this.options.repeat.toString()),t.push("-o",this.options.output,...this.options.frames),t}async run(t){t={shell:!0,...t};const i=this.options.stdoutLines??100,s=[];let u=!1;const n=[];let f=!1,l=!1,h;return new Promise((c,k)=>{const p=e=>{if(e&&(h=e),l&&u&&f){const o=s.length>0?this.options.output!=="-"?s.join(`
`):Buffer.concat(s):void 0,r=n.length>0?n.join(`
`):void 0;h&&h.message.match(/gifski exited with code/)&&r&&(h.message+=": "+r),this.emit("end",h,o,r),c({err:h,stdout:o,stderr:r})}};let a=(0,child_process_1.spawn)(`${exports.gifskiPath}`,this._buildSpawnArgs(),t);a.stdout.on("data",e=>{this.options.output!=="-"?this.options.quiet||(i!==0&&s.length===i&&s.shift(),s.push(e.toString())):s.push(e);const o=[...e.toString().trim().matchAll(/^Frame (\d+) \/ (\d+).*(\d*)s*$/g)][0];if(o){const r=parseInt(o[1]),d=parseInt(o[2]),g=o[3]?parseInt(o[3]):0,m={currentFrame:r,totalFrames:d,percent:r/d*100,secondsLeft:g};this.emit("progress",m)}}),a.stdout.on("close",()=>{u=!0,p()}),a.stderr.on("data",e=>{i!==0&&n.length===i&&n.shift(),n.push(e.toString())}),a.stderr.on("close",()=>{f=!0,p()}),a.on("error",e=>{const o=s.length>0?this.options.output!=="-"?s.join(`
`):Buffer.concat(s):void 0,r=n.length>0?n.join(`
`):void 0;this.emit("error",e,o,r)}),a.on("exit",(e,o)=>{l=!0,o?p(new Error("gifski was killed with signal "+o)):e?p(new Error("gifski exited with code "+e)):p(),a=null})})}runSync(t){t={shell:!0,stdio:"inherit",...t};const i=(0,child_process_1.spawnSync)(`${exports.gifskiPath}`,this._buildSpawnArgs(),t);let s=i.error;return i.signal&&i.signal!=="SIGTERM"?s?s.message+=`: gifski was killed with signal ${i.signal}`:s=new Error(`gifski was killed with signal ${i.signal}`):i.status&&(s?s.message+=`: gifski exited with code ${i.status}`:s=new Error(`gifski exited with code ${i.status}`)),{err:s,stdout:i.stdout,stderr:i.stderr}}}exports.GifskiCommand=GifskiCommand;