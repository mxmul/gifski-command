"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.GifskiCommand=exports.gifskiPath=void 0;const tslib_1=require("tslib"),child_process_1=require("child_process"),os=tslib_1.__importStar(require("os")),path=tslib_1.__importStar(require("path")),events_1=tslib_1.__importDefault(require("events")),platform=process.env.npm_config_platform||os.platform();let platformPath="";switch(platform){case"win32":platformPath=path.join("windows","gifski.exe");break;case"darwin":platformPath=path.join("macos","gifski");break;case"linux":platformPath=path.join("linux","gifski");break}if(!platformPath)throw Error(`gifski executable not found for platform ${platform}.`);exports.gifskiPath=path.join(__dirname,"..","node_modules","gifski","bin",platformPath);class GifskiCommand extends events_1.default.EventEmitter{options;constructor(t){super(),this.options=t}_buildSpawnArgs(){const t=[];return this.options.fps&&t.push("--fps",this.options.fps.toString()),this.options.fast&&t.push("--fast"),this.options.extra&&t.push("--extra"),this.options.quality&&t.push("--quality",this.options.quality.toString()),this.options.width&&t.push("--width",this.options.width.toString()),this.options.height&&t.push("--height",this.options.height.toString()),this.options.noSort&&t.push("--no-sort"),this.options.quiet&&t.push("--quiet"),this.options.repeat&&t.push("--repeat",this.options.repeat.toString()),t.push("-o",this.options.output,...this.options.frames),t}async run(t){t={shell:!0,...t};const a=this.options.stdoutLines??100,o=[];let u=!1;const p=[];let f=!1,l=!1,n;return new Promise((d,_)=>{const h=s=>{if(s&&(n=s),l&&u&&f){const i=this.options.output!=="-"?o.join(`
`):Buffer.concat(o),e=p.join(`
`);n&&n.message.match(/gifski exited with code/)&&(n.message+=": "+e),this.emit("end",n,i,e),d({err:n,stdout:i,stderr:e})}};let r=(0,child_process_1.spawn)(`${exports.gifskiPath}`,this._buildSpawnArgs(),t);r.stdout.on("data",s=>{this.options.output!=="-"?(a!==0&&o.length===a&&o.shift(),o.push(s.toString())):o.push(s);const i=[...s.toString().trim().matchAll(/^Frame (\d+) \/ (\d+).*(\d*)s*$/g)][0];if(i){const e=parseInt(i[1]),c=parseInt(i[2]),g=i[3]?parseInt(i[3]):0,m={currentFrame:e,totalFrames:c,percent:e/c*100,secondsLeft:g};this.emit("progress",m)}}),r.stdout.on("close",()=>{u=!0,h()}),r.stderr.on("data",s=>{a!==0&&p.length===a&&p.shift(),p.push(s.toString())}),r.stderr.on("close",()=>{f=!0,h()}),r.on("error",s=>{const i=this.options.output!=="-"?o.join(`
`):Buffer.concat(o),e=p.join(`
`);this.emit("error",s,i,e)}),r.on("exit",(s,i)=>{l=!0,i?h(new Error("gifski was killed with signal "+i)):s?h(new Error("gifski exited with code "+s)):h(),r=null})})}}exports.GifskiCommand=GifskiCommand;